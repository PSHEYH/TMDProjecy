using System;
using System.Collections.Generic;
using System.Text;

namespace TMDProject
{
    public static class Theory
    {
        public static void Lesson1() 
        {

            Console.WriteLine("        --- ТЕМА № 1 ПРИНЯТИЕ РЕШЕНИЕ В УСЛОВИЯХ НЕОПРЕДЕЛЛЁННОСТИ  --- ");
            Console.WriteLine("   В этом классе задач рассматривается такие задачи принятия решений в, которых одна сторона принимает решение" +
                "  сознательно и выбирает эти решения из конечного числа множества. Вторая сторона природа. Она сознаетельно не влияет " +
                "  а просто находиться в конечном варианте (состоянии)");
            Console.WriteLine("  Чтобы задать модель необходимо :\n" +
                "  1.Задать конечное множество вариантов выбора alpha1, alpha2, ... , alpha3\n" +
                "  2.Конечный набор вариантов множества состояний природы. beta1, beta2, ...,beta_n \n" +
                "  3.Обозначим матрицу субъективных последствий " +
                "   V={v_ij}_mxn , де v_ij - это субъективна характеристика которая даёт лицу что принимает решение выбор alpha_i, а" +
                "  природа находиться в состоянии beta1.");
            
            Console.WriteLine("    Рассмотрим задачу принятия решений: \n" +
                "   Студент собирается на улицу или куда то ещё подальше в город. Ему необходимо принять решение по поводу своей одежды и екипировки \n" +
                "   Будем считать что у него есть выбор из трёх альтернатив :\n" +
                "   1. Одеться как обычно\n" +
                "   2. Взять зонт \n" +
                "   3. Взять зонт и одеться полностью по погоде \n");
            Console.WriteLine("  С другой стороны и природа можешь находиться в состояниях \n" +
                "   1. Хорошая погода \n" +
                "   2. Плохая погода \n");
            Console.WriteLine("  Матрица V принимает вид ");
            Console.WriteLine("    b1    b2 \n" +
                              " a1 v11   v12\n" +
                              " a2 v21   v22\n" +
                              " a3 v31   v32\n");
            Console.WriteLine("   Будем называть эту матрицу матрицу полезности Q ");
            Console.WriteLine("   Однако вряд ли у природы можно что то выйграть по этому определим так называемую матрицу потерь L");

            Console.WriteLine("   L= {l_ij}_mxn:  l_ij=max(q_ij)-q_ij");
            Console.WriteLine("   Пример перехода ");
            Console.WriteLine("     0   1  \n" +
                              " Q=  0,1 0,6\n" +
                              "     0,9 0,4\n");
            Console.WriteLine("     1   0\n" +
                              " L = 0,9 0,4\n" +
                              "     0,1 0,6\n\n");

        }
        public static void Lesson2() 
        {
            Console.WriteLine("        --- ТЕМА № 2 ПОНЯТИЕ НЕРАНДОМИЗИРОВАНЫХ РЕШЕНИЙ  --- ");
            Console.WriteLine("          ---      Минимаксный критерий  --- ");
            Console.WriteLine("    Рандомизированое решение  - один и несколько вариантов, которые выбирает лицо, что " +
                "   принимает решение, с вероятностью 1. Для того чтобы выбрать лучшее решение из множества используют критерий оптимальности \n");
            Console.WriteLine("\n   Критерий оптимальности - правила, с помощью которых можно выбрать оптимальное решение из множества решений\n" +
                "  Существует много критериев к примеру: Минимаксный, критерий Севиджа, критерий Байеса, критерий Неймана Пирсона и другие\n");
            Console.WriteLine("     b1   b2  ......   bn  \n" +
                              " a1  l11  l12          l1n \n" +
                              " a2  l21  l22          l2n \n" +
                              " .   .................... \n" +
                              " an  ln1  ln2          lmn \n");
            Console.WriteLine("    --- Минимаксный критерий ---  ");
            Console.WriteLine("  Отображает психологию Лица что Принимает Решение, которая стоит на позиции наибольшего пессимизма.\n" +
                "  Такое лицо выбирает решение альфа1 увереный в том что его проигрыш составит max l1j, тоесть выбирает alpha_i - max l_ij,а\n среди" +
                " этих решений выбирает минимальный эллемент\n");
            Console.WriteLine("  alpha* = min(max потерь)");
            Console.WriteLine("  Используем минимаксный критерий на примере \n");
            Console.WriteLine("  0     1  \n" +
                              "  0,1   0,6\n" +
                              "  0,9   0,4\n");
            Console.WriteLine("   M(alpha1)= 1   M(alpha2)=0,6  M(alpha3)=0,9   min(M alpha_i)=2   L*=0,6\n\n");

        }

        public static void Lesson3() 
        {
            Console.WriteLine("         --- ТЕМА № 3 КРИТЕРИЙ НЕЙМАНА ПИРСОНА  --- ");
            Console.WriteLine("     Случай когда природа находиться только в двух состояниях бета1 и бета2 при этом один из них считается \n" +
                "   контролированным. Для него вводиться пороговое значение, L_пор. - пороговое значение потерь все те решение которые при \n" +
                "   контроллированом состоянии природы дают потери больше чем пороговое значение искореняются из расклада. В качестве \n" +
                "   оптимального решения выбираеться альфа* такой что при неконтролируемом состоянии минимизирует потери\n\n");
            Console.WriteLine("   Пусть бета1 - контроллируемое состояние, L_пор. = 0,7");
            Console.WriteLine("   Тогда выбор альфа3 удаляеться из множества решений так как матрица потерь имеет вид ");
            Console.WriteLine("    0     1\n" +
                              "    0,1   0,6\n" +
                              "    0,9   0,4  --- больше за 0,7");
            Console.WriteLine("     Далее мы минимизируем наши потери по неконтроллируемому состоянии. Значит ответ будет L* = 0,6, выбор: альфа2");
            Console.WriteLine("\n\n     Чаще всего используется в радиолокации когда появляется необходимость распознать цель и дать \n" +
                "    команду или на то чтобы её уничтожить или на то чтобы пропустить\n\n");
        
        }

        public static void Lesson4()
        {
            Console.WriteLine("        --- ТЕМА № 4 РАНДОМИЗИРОВАННЫЕ РЕШЕНИЯ  --- ");
            Console.WriteLine("       Лицо принимающее решение затрудняется сделать выбор среди нерандомизированных решений.\n" +
                              "  Он запускает в действие некий рандомный механизм ы найденный за этим механизмом решение называет рандомизированых\n" +
                              "       На языке принятия решение рандомизированых решений который обозначений Х - это распределение вероятностей на множестве\n" +
                              "  решений Х=(x1, x2,..., xm ), де xi - вероятность того что лицо принимающее решение xi-alphai з вероятностью xi, если у нас\n" +
                              "  матрица потерь  L={l_ij}_mxn и выбрано рандомизированых решений Х, состояние природы - beta_i\n" +
                              "  траты - L(x,beta_i)=l_1j*x_1+l_2j*x_2 + l_3j*x_3 + ... + l_nj*x_n \n\n" +
                              "       Удостоверимся, что введённое рандомизированое решение может улучшить наши потери\n" +
                              "        0    1   \n" +
                              "  L  =  0,1  0,6      X=(0;0,5;0,5)  \n" +
                              "        0,9  0,4 \n" +
                              "   L(X,beta1)=0+0,05+0,45=0,5 \n" +
                              "   L(X,beta2)=0+0,3+0,2=0,5 \n");


        }

        public static void Lesson5()
        {
            Console.WriteLine("        --- ТЕМА № 5 МИНИМАКСНЫЙ КРИТЕРИЙ (РАНДОМИЗИРОВАНЫХ РЕШЕНИЙ)  --- ");
            Console.WriteLine("     В минимаксном критерии мы должны среди точек платежного множества К найти точку (L1,L2)  которая минимизирует максимум\n" +
                              "   з (L1,L2) тоесть решить задачу оптимизации\n\n" +
                              "       Рассмотрим, какой вид имеют линии уровня, что отвечают целевой функции максимумов з L1, L2. Для этого возьмём\n" +
                              "   max(L1,L2)=const . Проведем бисектрису первой четверти нашей плоскости . Рассмотрим функцию в каждой из полусплоскостей\n" +
                              "      1) L1>=L2  L1=const - это уравнение полупрямой конец которой находиться на бисекртисе .\n" +
                              "      2) L2>=L1  L2=const - аналогично\n" +
                              "     Таким образом линии уровня, что отвечают минимаксному критерию - это треугольный клин вершина которой которая находиться\n" +
                              "   на бисекртисе , а стороны паралельны осям координат и угол между этими полупрямыми 90 . Тогда, чтобы найти оптимальное решение\n" +
                              "   за данными критериями мы должны из всего множества клинов найти тот клин, что впервые коснёться платёжного множества\n" +
                              "       Это может быть вершина платежного множества К или отрезок, чтобы соединяет вершины\n" +
                              "       Рассмотрим как найти решение, если точка находиться на отрезке . Пусть первое касание находиться на отрезке.\n" +
                              "   что соединяет alpha_i и alpha_j - это означает, что в оптимальное рандомизированое решение найденное за этим критерием\n" +
                              "       Все компоненты кроме i и j равны нулю, чтобы i-ый та j-ый будем считать, что alpha_i выбираем с вероятностью Х,\n" +
                              "   alpha_j выбираем з (1-х). Тогда с одной стороны точку прикосновения платежного множества К можна записать в виде\n" +
                              "       x*(li1,li2) + (1-x)*(lj1,lj2) = (L1,L2)  - есть бисектриса \n" +
                              "        (li1*x+lj1*(1-x);li2*x+lj2*(1-x)) = (L1,L2)  \n" +
                              "    L1 = L2  =>  li1*x + lj1*(1-x) = li2*x + lj2*(1-x) \n" +
                              "        Тогда оптимальное решение : " +
                              "   Х=(0,...,0,х,...,(1-х),0)");

        }

        public static void Lesson6()
        {
            Console.WriteLine("        --- ТЕМА № 6 Алгоритм поиска нерандомизированого решнеия за критерием Неймана - Пирсона   --- ");
            Console.WriteLine(" 1.  Построить платёжное множество \n" +
                              " 2.  Выключить из платёжного множества все точки для которых значение за состоянием что контроллируется \n" +
                              "  больше за граничное \n" +
                              " 3.  Найти координаты точки платежного множества которой отвечает наименьшеее значение за состоянием что не \n" +
                              " конртоллируется. Обычно её можно найти с помощью уравнения xi*(li1,li2)+(1-xi)*(lj1,lj2)=(L1,L2) \n");

        }
    }
}
